"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/styler/page",{

/***/ "(app-pages-browser)/./src/utils/documentProcessor.ts":
/*!****************************************!*\
  !*** ./src/utils/documentProcessor.ts ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DocumentProcessor: function() { return /* binding */ DocumentProcessor; }\n/* harmony export */ });\n/* harmony import */ var mammoth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mammoth */ \"(app-pages-browser)/./node_modules/mammoth/lib/index.js\");\n/* harmony import */ var docx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! docx */ \"(app-pages-browser)/./node_modules/docx/build/index.mjs\");\n/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! jszip */ \"(app-pages-browser)/./node_modules/jszip/dist/jszip.min.js\");\n/* harmony import */ var jszip__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(jszip__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nclass DocumentProcessor {\n    async processDocument(file, bookName, styles, transitions, removalPrompts, postProcessing, onProgress) {\n        const startTime = Date.now();\n        try {\n            var _zip_folder, _zip_folder1;\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(5, \"Lendo documento...\");\n            // Read document content\n            const arrayBuffer = await file.arrayBuffer();\n            const result = await mammoth__WEBPACK_IMPORTED_MODULE_0__.extractRawText({\n                arrayBuffer\n            });\n            const text = result.value;\n            // Extract paragraphs\n            const paragraphs = text.split(\"\\n\").filter((p)=>p.trim().length > 0);\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(20, \"Analisando estrutura do documento...\");\n            // OPTIMIZED BATCH PROCESSING - Fix redundancy issue\n            const processedParagraphs = await this.processParagraphsOptimized(paragraphs, styles, removalPrompts, onProgress);\n            // Apply post-processing if requested\n            if (postProcessing) {\n                onProgress === null || onProgress === void 0 ? void 0 : onProgress(65, \"Aplicando p\\xf3s-processamento...\");\n                this.applyPostProcessing(processedParagraphs, postProcessing);\n            }\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(70, \"Aplicando estilos e formata\\xe7\\xe3o...\");\n            // Create styled document\n            const doc = this.createStyledDocument(processedParagraphs, styles, bookName);\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(85, \"Criando arquivo sanitizado para InDesign...\");\n            // Create sanitized version for InDesign with consistent style naming\n            const sanitizedDoc = this.createSanitizedDocumentForInDesign(processedParagraphs, styles, bookName);\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(90, \"Gerando arquivos finais...\");\n            // Generate blobs\n            const [mainBlob, sanitizedBlob] = await Promise.all([\n                docx__WEBPACK_IMPORTED_MODULE_1__.Packer.toBlob(doc),\n                docx__WEBPACK_IMPORTED_MODULE_1__.Packer.toBlob(sanitizedDoc)\n            ]);\n            // Create ZIP with all files\n            const zip = new (jszip__WEBPACK_IMPORTED_MODULE_2___default())();\n            const timestamp = new Date().toISOString().replace(/[:.]/g, \"-\");\n            const folderName = \"\".concat(bookName, \"_\").concat(timestamp);\n            (_zip_folder = zip.folder(folderName)) === null || _zip_folder === void 0 ? void 0 : _zip_folder.file(\"completo.docx\", mainBlob);\n            (_zip_folder1 = zip.folder(folderName)) === null || _zip_folder1 === void 0 ? void 0 : _zip_folder1.file(\"completo_pronto_para_indesign.docx\", sanitizedBlob);\n            const zipBlob = await zip.generateAsync({\n                type: \"blob\"\n            });\n            const processingTime = Math.round((Date.now() - startTime) / 1000);\n            onProgress === null || onProgress === void 0 ? void 0 : onProgress(100, \"Processamento conclu\\xeddo!\");\n            return {\n                success: true,\n                documentBlob: mainBlob,\n                zipBlob,\n                stats: {\n                    totalPages: Math.ceil(paragraphs.length / 30),\n                    totalParagraphs: paragraphs.length,\n                    questionsProcessed: processedParagraphs.filter((p)=>p.style === \"enunciado\" || p.style === \"questao\").length,\n                    apiCalls: Math.ceil(paragraphs.length / 25),\n                    estimatedCostUSD: Math.ceil(paragraphs.length / 25) * 0.002\n                },\n                files: [\n                    {\n                        name: \"completo.docx\",\n                        size: this.formatFileSize(mainBlob.size),\n                        path: \"completo.docx\"\n                    },\n                    {\n                        name: \"completo_pronto_para_indesign.docx\",\n                        size: this.formatFileSize(sanitizedBlob.size),\n                        path: \"completo_pronto_para_indesign.docx\"\n                    }\n                ],\n                processingTime: \"\".concat(Math.floor(processingTime / 60), \"m \").concat(processingTime % 60, \"s\")\n            };\n        } catch (error) {\n            console.error(\"Erro no processamento:\", error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Erro desconhecido no processamento\"\n            };\n        }\n    }\n    async processParagraphsOptimized(paragraphs, styles, removalPrompts, onProgress) {\n        const processedParagraphs = [];\n        let apiCalls = 0;\n        // OPTIMIZED: Balance between context and accuracy\n        // 20-25 paragraphs gives enough context without overwhelming the AI\n        const batchSize = 25; // Optimal for accuracy with context\n        for(let i = 0; i < paragraphs.length; i += batchSize){\n            const batch = paragraphs.slice(i, Math.min(i + batchSize, paragraphs.length));\n            // Add some context from previous batch for continuity (last 3 paragraphs)\n            let contextBatch = batch;\n            if (i > 0 && processedParagraphs.length >= 3) {\n                const previousContext = paragraphs.slice(Math.max(0, i - 3), i);\n                contextBatch = [\n                    ...previousContext,\n                    ...batch\n                ];\n            }\n            // Build context-aware prompt\n            const prompt = this.buildOptimizedPrompt(contextBatch, styles, removalPrompts, i, paragraphs.length, i > 0 ? 3 : 0);\n            try {\n                // Call our backend API instead of OpenAI directly\n                const systemPrompt = \"Voc\\xea \\xe9 um assistente especializado em formatar documentos educacionais.\\nAnalise o texto e marque CADA par\\xe1grafo com tags XML apropriadas.\\nIMPORTANTE: \\n- Marque TODOS os par\\xe1grafos, mesmo que n\\xe3o correspondam a nenhum estilo espec\\xedfico (use <normal> para texto comum)\\n- Mantenha a ordem exata dos par\\xe1grafos\\n- Para remo\\xe7\\xf5es, use as tags de in\\xedcio e fim especificadas\";\n                const apiResponse = await fetch(\"/api/process-document\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\"\n                    },\n                    body: JSON.stringify({\n                        paragraphs: contextBatch,\n                        systemPrompt: systemPrompt + \"\\n\\n\" + prompt,\n                        userId: \"current-user\" // This would come from auth context in production\n                    })\n                });\n                if (!apiResponse.ok) {\n                    const error = await apiResponse.json();\n                    throw new Error(error.error || \"Failed to process document\");\n                }\n                const { processedParagraphs, creditsRemaining, plan } = await apiResponse.json();\n                apiCalls++;\n                const markedContent = processedParagraphs.join(\"\\n\\n\");\n                // Parse marked content\n                const parsed = this.parseMarkedContent(markedContent, styles);\n                processedParagraphs.push(...parsed);\n                const progress = 20 + (i + batchSize) / paragraphs.length * 50;\n                onProgress === null || onProgress === void 0 ? void 0 : onProgress(Math.min(progress, 70), \"Processando \".concat(Math.min(i + batchSize, paragraphs.length), \"/\").concat(paragraphs.length, \" par\\xe1grafos...\"));\n            } catch (error) {\n                console.error(\"Erro ao processar batch:\", error);\n                // Add unprocessed paragraphs as normal text\n                batch.forEach((text)=>{\n                    processedParagraphs.push({\n                        text,\n                        style: \"normal\",\n                        remove: false,\n                        type: \"text\"\n                    });\n                });\n            }\n        }\n        return processedParagraphs;\n    }\n    buildOptimizedPrompt(batch, styles, removalPrompts, startIndex, totalParagraphs) {\n        let contextOffset = arguments.length > 5 && arguments[5] !== void 0 ? arguments[5] : 0;\n        const actualStart = startIndex - contextOffset + 1;\n        const actualEnd = Math.min(startIndex + batch.length - contextOffset, totalParagraphs);\n        let prompt = \"Contexto: Analisando par\\xe1grafos \".concat(actualStart, \" a \").concat(actualEnd, \" de um total de \").concat(totalParagraphs, \".\\n\");\n        if (contextOffset > 0) {\n            prompt += \"Nota: Os primeiros \".concat(contextOffset, \" par\\xe1grafos s\\xe3o contexto da batch anterior (j\\xe1 processados).\\n\");\n        }\n        prompt += \"\\n\";\n        prompt += \"ESTILOS DISPON\\xcdVEIS:\\n\";\n        styles.forEach((style)=>{\n            if (style.elementType === \"text\") {\n                prompt += \"<\".concat(style.marker.replace(/[\\[\\]]/g, \"\"), \"> - \").concat(style.prompt, \"\\n\");\n            }\n        });\n        prompt += \"\\nREMO\\xc7\\xd5ES:\\n\";\n        removalPrompts.forEach((removal)=>{\n            prompt += \"\".concat(removal.startMarker, \" e \").concat(removal.endMarker, \" - \").concat(removal.prompt, \"\\n\");\n        });\n        prompt += \"\\nTEXTO PARA ANALISAR:\\n\";\n        batch.forEach((para, index)=>{\n            prompt += \"[P\".concat(startIndex + index + 1, \"] \").concat(para, \"\\n\");\n        });\n        prompt += \"\\nRETORNE o texto marcado mantendo a numera\\xe7\\xe3o [P#] e aplicando as tags apropriadas.\\nExemplo de sa\\xedda:\\n[P1] <TITULO_SIMULADO>Simulado 1</TITULO_SIMULADO>\\n[P2] <normal>Texto comum sem estilo espec\\xedfico</normal>\\n[P3] <ENUNCIADO>1. Qual \\xe9 a capital do Brasil?</ENUNCIADO>\\n[P4] <ALTERNATIVA>a) S\\xe3o Paulo</ALTERNATIVA>\";\n        return prompt;\n    }\n    parseMarkedContent(content, styles) {\n        const parsed = [];\n        const lines = content.split(\"\\n\");\n        for (const line of lines){\n            if (!line.trim()) continue;\n            // Extract paragraph number if present\n            const paraMatch = line.match(/\\[P\\d+\\]/);\n            const cleanLine = paraMatch ? line.replace(paraMatch[0], \"\").trim() : line.trim();\n            let matched = false;\n            // Check for removal markers\n            if (cleanLine.includes(\"REMOVE\") && (cleanLine.includes(\"START\") || cleanLine.includes(\"END\"))) {\n                parsed.push({\n                    text: this.extractText(cleanLine),\n                    style: null,\n                    remove: true,\n                    type: \"text\"\n                });\n                matched = true;\n            } else {\n                // Check for style markers\n                for (const style of styles){\n                    const marker = style.marker.replace(/[\\[\\]]/g, \"\");\n                    const tagRegex = new RegExp(\"<\".concat(marker, \">(.*?)</\").concat(marker, \">\"), \"i\");\n                    const match = cleanLine.match(tagRegex);\n                    if (match) {\n                        parsed.push({\n                            text: match[1].trim(),\n                            style: style.id,\n                            remove: false,\n                            type: style.elementType\n                        });\n                        matched = true;\n                        break;\n                    }\n                }\n            }\n            // If no match, check for normal tag or add as normal text\n            if (!matched) {\n                const normalMatch = cleanLine.match(/<normal>(.*?)<\\/normal>/i);\n                if (normalMatch) {\n                    parsed.push({\n                        text: normalMatch[1].trim(),\n                        style: \"normal\",\n                        remove: false,\n                        type: \"text\"\n                    });\n                } else {\n                    const cleanText = this.extractText(cleanLine);\n                    if (cleanText) {\n                        parsed.push({\n                            text: cleanText,\n                            style: \"normal\",\n                            remove: false,\n                            type: \"text\"\n                        });\n                    }\n                }\n            }\n        }\n        return parsed;\n    }\n    extractText(line) {\n        return line.replace(/<[^>]*>/g, \"\").replace(/\\[P\\d+\\]/, \"\").trim();\n    }\n    createStyledDocument(processedParagraphs, styles, bookName) {\n        const children = [];\n        // Add title\n        children.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n            alignment: docx__WEBPACK_IMPORTED_MODULE_1__.AlignmentType.CENTER,\n            children: [\n                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                    text: bookName,\n                    bold: true,\n                    size: 32,\n                    color: \"1e40af\"\n                })\n            ],\n            spacing: {\n                after: 400\n            }\n        }));\n        // Process paragraphs\n        for (const para of processedParagraphs){\n            var _style_wordStyle, _formatting_color;\n            if (para.remove) continue;\n            const style = styles.find((s)=>s.id === para.style);\n            const formatting = (style === null || style === void 0 ? void 0 : style.formatting) || {};\n            let alignment = docx__WEBPACK_IMPORTED_MODULE_1__.AlignmentType.LEFT;\n            if (formatting.alignment === \"center\") alignment = docx__WEBPACK_IMPORTED_MODULE_1__.AlignmentType.CENTER;\n            if (formatting.alignment === \"right\") alignment = docx__WEBPACK_IMPORTED_MODULE_1__.AlignmentType.RIGHT;\n            if (formatting.alignment === \"justify\") alignment = docx__WEBPACK_IMPORTED_MODULE_1__.AlignmentType.JUSTIFIED;\n            const isHeading = style === null || style === void 0 ? void 0 : (_style_wordStyle = style.wordStyle) === null || _style_wordStyle === void 0 ? void 0 : _style_wordStyle.toLowerCase().includes(\"heading\");\n            children.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                alignment,\n                heading: isHeading ? docx__WEBPACK_IMPORTED_MODULE_1__.HeadingLevel.HEADING_2 : undefined,\n                children: [\n                    new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                        text: para.text,\n                        bold: formatting.bold || false,\n                        italics: formatting.italic || false,\n                        underline: formatting.underline ? {} : undefined,\n                        size: formatting.fontSize ? formatting.fontSize * 2 : 24,\n                        color: ((_formatting_color = formatting.color) === null || _formatting_color === void 0 ? void 0 : _formatting_color.replace(\"#\", \"\")) || \"000000\"\n                    })\n                ],\n                spacing: {\n                    after: 200\n                }\n            }));\n        }\n        return new docx__WEBPACK_IMPORTED_MODULE_1__.Document({\n            sections: [\n                {\n                    properties: {},\n                    children\n                }\n            ]\n        });\n    }\n    applyPostProcessing(paragraphs, options) {\n        paragraphs.forEach((para)=>{\n            if (para.remove) return;\n            let text = para.text;\n            // Remove question numbers if requested\n            if (options.removeQuestionNumbers && (para.style === \"enunciado\" || para.style === \"questao\")) {\n                // Remove patterns like \"1.\", \"1)\", \"01.\", \"Q1:\", etc.\n                text = text.replace(/^(\\d+[\\.\\)]\\s*|Q\\d+:?\\s*|\\d+\\s*-\\s*)/i, \"\");\n            }\n            // Remove alternative letters if requested\n            if (options.removeAlternativeLetters && para.style === \"alternativa\") {\n                // Remove patterns like \"a)\", \"A.\", \"(a)\", \"[A]\", etc.\n                text = text.replace(/^(\\(?[a-eA-E][\\.\\)]\\)?|\\[[a-eA-E]\\])\\s*/i, \"\");\n            }\n            // Apply custom removals\n            if (options.customRemovals && options.customRemovals.length > 0) {\n                options.customRemovals.forEach((pattern)=>{\n                    try {\n                        const regex = new RegExp(pattern, \"gi\");\n                        text = text.replace(regex, \"\");\n                    } catch (e) {\n                        // If regex is invalid, try literal replacement\n                        text = text.replace(new RegExp(pattern.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"), \"gi\"), \"\");\n                    }\n                });\n            }\n            para.text = text.trim();\n        });\n    }\n    createSanitizedDocumentForInDesign(processedParagraphs, styles, bookName) {\n        const children = [];\n        // Create a style map to ensure consistent naming for InDesign\n        const styleMap = new Map();\n        styles.forEach((style)=>{\n            // Use the Word style name for InDesign consistency\n            // This prevents duplicate styles with same names\n            styleMap.set(style.id, style.wordStyle);\n        });\n        // Add document header with style definitions for InDesign\n        children.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n            children: [\n                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                    text: \"[INDESIGN_STYLES_START]\",\n                    size: 20\n                })\n            ]\n        }));\n        // List all styles for InDesign to recognize\n        styles.forEach((style)=>{\n            children.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                children: [\n                    new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                        text: \"[STYLE_DEF] \".concat(style.wordStyle, \" = \").concat(style.marker),\n                        size: 20\n                    })\n                ]\n            }));\n        });\n        children.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n            children: [\n                new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                    text: \"[INDESIGN_STYLES_END]\",\n                    size: 20\n                })\n            ],\n            spacing: {\n                after: 400\n            }\n        }));\n        // Process paragraphs with consistent style naming\n        for (const para of processedParagraphs){\n            if (para.remove) continue;\n            const style = styles.find((s)=>s.id === para.style);\n            const styleName = styleMap.get(para.style || \"\") || \"Normal\";\n            // Use consistent style naming for InDesign\n            children.push(new docx__WEBPACK_IMPORTED_MODULE_1__.Paragraph({\n                children: [\n                    new docx__WEBPACK_IMPORTED_MODULE_1__.TextRun({\n                        text: \"[\".concat(styleName, \"] \").concat(para.text),\n                        size: 24\n                    })\n                ],\n                spacing: {\n                    after: 120\n                }\n            }));\n        }\n        return new docx__WEBPACK_IMPORTED_MODULE_1__.Document({\n            sections: [\n                {\n                    properties: {},\n                    children\n                }\n            ]\n        });\n    }\n    formatFileSize(bytes) {\n        if (bytes < 1024) return bytes + \" B\";\n        if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + \" KB\";\n        return (bytes / (1024 * 1024)).toFixed(1) + \" MB\";\n    }\n    constructor(){\n    // API key is now handled server-side\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/utils/documentProcessor.ts\n"));

/***/ })

});